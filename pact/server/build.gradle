plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Add in spring Boot support
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'

    id "au.com.dius.pact" version "4.0.9"
    id "com.wiredforcode.spawn" version "0.8.2"
}

import com.wiredforcode.gradle.spawn.*

group = 'com.sainsburys.pd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext['spock.version'] = '1.3'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'

    testImplementation 'junit:junit:4.12'
}

test {
    // for the example, always run tests
    outputs.upToDateWhen {false}

    testLogging {
        showStandardStreams = true
    }
}

springBoot {
    mainClassName = 'com.sainsburys.pd.App'
}

task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -Dspring.profiles.active=test -jar ${jar.archiveFile.get()}"
    ready 'Started App'
}

task stopProvider(type: KillProcessTask) {

}

pact {
    serviceProviders {
        'Addition_Provider' {
            protocol = 'http'
            host = 'localhost'
            port = 8080

            startProviderTask = startProvider
            terminateProviderTask = stopProvider

            hasPactsWith('manyConsumers') {

                // Will define a consumer for each pact file in the directory.
                // Consumer name is read from contents of pact file
                pactFileLocation = file("$projectDir/../pacts")
            }
        }
    }
}